from bs4 import BeautifulSoup
import pandas as pd
import re
from typing import Optional, Dict
from src.exceptions import ParseError, SaveToExcelError

def cvss_edited(cvss):
    try:
        pattern = r'\d+(?:.\d+)?'
        number = re.findall(pattern, cvss)
        if float(number[0]) < 4:
            return f'{number[0]} Low'
        elif float(number[0]) < 7:
            return f'{number[0]} Medium'
        elif float(number[0]) < 9:
            return f'{number[0]} High'
        else:
            return f'{number[0]} Critical'
    except Exception:
        return '-----'

class VulnerabilityParser:
    def parse_vulnerability_data(self, html: str) -> pd.DataFrame:
        try:
            soup = BeautifulSoup(html, 'html.parser')
            data = self._extract_data(soup)
            return pd.DataFrame([data])
        except Exception as e:
            raise ParseError(f"Parsing failed: {str(e)}")

    def _extract_data(self, soup: BeautifulSoup) -> Dict[str, str]:
        data = {
            'Vendor': 'Not specified',
            'Software': 'Not specified',
            'CVSS': 'Not specified',
            'CVE': 'Not specified'
        }

        main_table = soup.find('table', class_='table')
        if not main_table:
            return data

        # Парсим информацию об уязвимом ПО
        for row in main_table.find_all('tr'):
            cells = row.find_all('td')
            if len(cells) < 4:
                continue
            
            if len(cells) > 0:
                matches = re.findall(r"<span>([^<]+?)</span>", str(cells[0]))
                if matches:
                  data['Vendor'] = matches[0]
            
            if len(cells) > 1:
              matches = re.findall(r"<span>([^<]+?)</span>", str(cells[1]))
              if matches:
                data['Software'] = matches[0]

        # Парсим уровень опасности (CVSS)
        for row in main_table.find_all('tr'):
            cells = row.find_all('td')
            if len(cells) < 2:
                continue

            # Предполагаем, что CVSS всегда во второй ячейке
            value = cells[1].get_text(strip=True)

            cvss_match = re.search(r"CVSS 3\.0 составляет (\d+,\d+)", value)
            if cvss_match:
                cvss_value_with_comma = cvss_match.group(1)
                cvss_value_with_dot = cvss_value_with_comma.replace(",", ".")
                data['CVSS'] = cvss_edited(cvss_value_with_dot)
                break

        # Парсим CVE идентификаторы
        for row in main_table.find_all('tr'):
            cells = row.find_all('td')
            if len(cells) < 2:
                continue
            
            header = cells[0].get_text(strip=True).lower()
            value = cells[1].get_text(strip=True)

            if 'идентификаторы других систем описаний уязвимостей' in header:
                cve_matches = re.findall(r'CVE-\d{4}-\d{4,}', value)
                if cve_matches:
                    data['CVE'] = ', '.join(cve_matches)

        return data

    def save_to_excel(self, df: pd.DataFrame, output_file: str) -> None:
        try:
            if not df.empty:
                df.to_excel(output_file, index=False)
        except Exception as e:
            raise SaveToExcelError(f"Failed to save to Excel: {str(e)}")